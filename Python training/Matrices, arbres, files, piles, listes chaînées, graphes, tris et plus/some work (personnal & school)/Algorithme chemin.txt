
Algorithme chemin(g, sommet_de_depart)
Visités : liste
Pile : pile
mettre sommet_de_depart dans pile
TantQue pile non vide
    depiler dans u
    Si u n’est pas dans Visités
        ajouter u à Visités
        Pour tout voisin de u
            ajouter voisin à la pile
        FinPour
    FinSi
FinTantQue
retourner Visités



1) appliquer l’algorithme chemin au graphe ci-dessous:  sommet_de_depart = 1

Algorithme chemin(graphe, 1):
Visités: liste
Pile: pile
empiler 1 dans Pile
Tant que Pile n'est pas vide:  (vrai: Pile contient 1)
    dépiler Pile dans u  (u contient 1)
    Si u n'est pas dans Visités:  (vrai: Visités = liste vide)
        ajouter u à Visités  (Visités = [1])
        Pour tout voisin de u:
            ajouter voisin à Pile  (Pile = [6, 5, 4, 3])
        FinPour
    FinSi
    Pile n'est pas vide: on continue
    dépiler Pile dans u  (u contient 6)
    Si u n'est pas dans Visités:  (vrai: Visités = [1])
        ajouter u à Visités  (Visités = [1, 6])
        Pour tout voisin de u:
            ajouter voisin à Pile  (Pile = [1, 5, 4, 3])
        FinPour
    FinSi
    Pile n'est pas vide: on continue
    dépiler Pile dans u  (u contient 1)
    Si u n'est pas dans Visités:  (faux: Visités = [1, 6])
    (Pile = [5, 4, 3])
    FinSi
    Pile n'est pas vide: on continue
    dépiler Pile dans u  (u contient 5)
    Si u n'est pas dans Visités:  (vrai: Visités = [1, 6])
        ajouter u à Visités  (Visités = [1, 6, 5])
        Pour tout voisin de u:
            ajouter voisin à Pile  (Pile = [1, 4, 4, 3])
        FinPour
    FinSi
    Pile n'est pas vide: on continue
    dépiler Pile dans u  (u contient 1)
    Si u n'est pas dans Visités:  (faux: Visités = [1, 6, 5])
    (Pile = [4, 4, 3])
    FinSi
    Pile n'est pas vide: on continue
    dépiler Pile dans u  (u contient 4)
    Si u n'est pas dans Visités:  (vrai: Visités = [1, 6, 5])
        ajouter u à Visités  (Visités = [1, 6, 5, 4])
        Pour tout voisin de u:
            ajouter voisin à Pile  (Pile = [1, 5, 4, 3])
        FinPour
    FinSi
    Pile n'est pas vide: on continue
    dépiler Pile dans u  (u contient 1)
    Si u n'est pas dans Visités:  (vrai: Visités = [1, 6, 5, 4])
    (Pile = [5, 4, 3])
    FinSi
    Pile n'est pas vide: on continue
    dépiler Pile dans u  (u contient 5)
    Si u n'est pas dans Visités:  (faux: Visités = [1, 6, 5, 4])
    (Pile = [4, 3])
    FinSi
    Pile n'est pas vide: on continue
    dépiler Pile dans u  (u contient 4)
    Si u n'est pas dans Visités:  (faux: Visités = [1, 6, 5, 4])
    (Pile = [3])
    FinSi
    Pile n'est pas vide: on continue
    dépiler Pile dans u  (u contient 3)
    Si u n'est pas dans Visités:  (vrai: Visités = [1, 6, 5, 4])
        ajouter u à Visités  (Visités = [1, 6, 5, 4, 3])
        Pour tout voisin de u:
            ajouter voisin à Pile  (Pile = [2, 1])
        FinPour
    FinSi
    Pile n'est pas vide: on continue
    dépiler Pile dans u  (u contient 2)
    Si u n'est pas dans Visités:  (vrai: Visités = [1, 6, 5, 4, 3])
        ajouter u à Visités  (Visités = [1, 6, 5, 4, 3, 2])
        Pour tout voisin de u:
            ajouter voisin à Pile  (Pile = [3, 1])
        FinPour
    FinSi
    Pile n'est pas vide: on continue
    dépiler Pile dans u  (u contient 3)
    Si u n'est pas dans Visités:  (faux: Visités = [1, 6, 5, 4, 3, 2])
    (Pile = [1])
    FinSi
    Pile n'est pas vide: on continue
    dépiler Pile dans u  (u contient 1)
    Si u n'est pas dans Visités:  (faux: Visités = [1, 6, 5, 4, 3, 2])
    (Pile = [])
    FinSi
    Pile est vide: on sort de la boucle
FinTantQue
retourner Visités  (Visités = [1, 6, 5, 4, 3, 2])
